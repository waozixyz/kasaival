name: nim raylib build

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Restore cache if it exists.
    - name: Restore Cache
      uses: actions/cache@v2
      with:
        path: |
          emsdk
          raylib
        key: ${{ runner.os }}-nim-raylib-build-${{ hashFiles('**/lockfiles') }}

    # Checkout the codebase.
    - name: Checkout
      uses: actions/checkout@v2

        
    - name: Setup Nim environment
      uses: jiro4989/setup-nim-action@v1.1.4
      with:
        nim-version: 'devel' # default is 'stable'
    - run: nimble install -y naylib

    # Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get install -y git libasound2-dev mesa-common-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
    
    # Install emsdk.
    - name: Install emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk &&
        cd emsdk/ &&
        ./emsdk install latest &&
        ./emsdk activate latest

        
    # Install raylib and make raylib.
    - name: Install Raylib and make raylib
      run: |
        source emsdk/emsdk_env.sh &&
        git clone https://github.com/raysan5/raylib.git raylib &&
        cd raylib/src &&
        make PLATFORM=PLATFORM_DESKTOP RAYLIB_LIBTYPE=SHARED &&
        make PLATFORM=PLATFORM_WEB &&
        sudo make install RAYLIB_LIBTYPE=SHARED
  
    # Build the desktop version.
    - name: Build desktop version
      run: nim c -d:release src/main.nim

    # Create a releases folder and move desktop output there.
    - name: Create desktop output directory and move binaries
      run: |
        mkdir -p releases/desktop
        mv src/main releases/desktop/

    # Create a web output in the "public" folder and move it to "releases" folder.
    - name: Create web output directory
      run: |
        mkdir -p ../public/

    # Build the web version using emscripten.
    - name: Build web version
      run: nim c -d:release -d:emscripten src/main.nim
   
    # Create a web release folder and move zip content.
    - name: Create a web release folder and move zip content.
      run: |
        zip ./release.zip ../public/*
        mkdir -p releases/web
        mv release.zip releases/web

     # Upload desktop and web artifacts to Github.
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Desktop Output
        path: releases/desktop/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Web Output
        path: releases/web/release.zip
